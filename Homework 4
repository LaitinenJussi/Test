RNGkind(sample.kind = 'Rejection')
rm(list=ls())
library('data.table')
#This space is reserved for the teacher:
#Ex1: NA
#Ex2 (3pts): 
#Ex3: NA 
#Feedback:
#
#
#
#################################################
#Rscript for HW4

#Group nr: 5
#Members:
# Alina-Emelie Andersson 
# Oskar Lindman
# Jussi Laitinen
#...
#Member whose quiz variant is used for coding:
# Oskar LIndman

#Annotations guidelines:
#Ex1: no Rcode
#Ex2: use three comment boxes; do NOT use in-line comments (see below for details)
#Ex3: no Rcode
#################################################Code for Exercise 2
#################################################Code for Exercise 2
#################################################Code for Exercise 2

#comment box related to function 1
#################################################
# Function calculates bond prices for zero coupon
# bonds for thegiven yields and maturities.
# 
# The following arguments should be given:
# YY [num] vector of yields, unit-less, annualized
# MM [num] vector maturities, in years
#################################################
bondprice <- function(YY, MM)
{
    temp <- NULL
    result <- NULL
    R <- length(YY)
    for(i in 1:R)
      {
        temp <- 1/((0.01*YY[i])+1)^MM[i]
        result[i] <- temp
      }
    return(result)
}
maturities <- c(0.5, 1, 1.5)
yields <- c(2,2,2)
bondprice(yields,maturities)

#comment box related to function 2
#################################################
# The function, forwardfun, computes the forward
# rates for the given yields and  maturities.
# 
# The following arguments should be given:
# YY [num] vector of yields, unit-less, annualized
# MM [num] vector maturities, in years
#################################################
#corresponding Rcode next
forwardfun <- function(YY, MM) 

  {
    values <- c(YY[1], YY[-1]+MM[-length(MM)]*diff(YY)/diff(MM))
    return(values)
  }
  
forwardfun(YY=yields, MM=maturities)

#comment box related to the remaining tasks 
#(data load, parts a), b), c), etc)
#################################################
#
#
#
#
#
#
#
#
#
#
#################################################
#corresponding Rcode next
Sdate<-20181116
Edate<-20200221

Yieldsrt<-read.table(file='~/Desktop/IMF/DailyTreasuryYieldCurveRates.txt', header=TRUE)
Yields0<-data.table(Yieldsrt[Yieldsrt$yyyymmdd>=Sdate & Yieldsrt$yyyymmdd<=Edate,])
Yields<-Yields0[,-c(1:2)]
D<-as.matrix(Yields)
round(apply(X=D*0.01,MARGIN = 2,FUN = 'mean'),4)
round(apply(X=D*0.01,MARGIN = 2,FUN = 'min'),4)
round(apply(X=D*0.01,MARGIN = 2,FUN = 'max'),4)

Bondprices<-apply(X=D,MARGIN = 1,FUN = 'bondprice', MM=c(c(1,2,3,6)/12,1:3,5,7,10,20,30))
Bondprices<-t(Bondprices)
Bondprices<-round((Bondprices),4)
Bondprices
first(Bondprices)

Forwardrates<-apply(X=D*0.01,MARGIN = 1,FUN = 'forwardfun', MM=c(c(1,2,3,6)/12,1:3,5,7,10,20,30))
Forwardrates<-t(Forwardrates)
Forwardrates<-round((Forwardrates),4)
Forwardrates
last(Forwardrates)


#################################################
#
#
#
#
#
#
#
#
#
#
#################################################

#Q3

install.packages("gmm")
library("gmm")

g6 <- function(theta, x) {
  t <- length(x)
  et1 <- diff(x) - theta[1] - theta[2] * x[-t]
  ht <- et1^2 - theta[3] * x[-t]^(2 * theta[4])
  g <- cbind(et1, et1 * x[-t], ht, ht * x[-t])
  return(g)
}


#Consider daily rates for 1.MO maturity (expressed in percentages, annualized)
Start<- 20181114
End<- 20200226

daily<-data.table(Yieldsrt[Yieldsrt$yyyymmdd>=Start & Yieldsrt$yyyymmdd<=End,])
daily<-daily[,c(3)] # daily 1.MO rates

#Using Rfunction gmm of Rpackage gmm, with starting values of the parameters set according to the guidelines of Lab5:
# Simulate one path of the process for the short rate {r_t} on [0,T] from the Vasicek model

#a) fit the unrestricted model (model specified by equation (2) therein) to the data;


rf<-daily$X1.MO
dr <- diff(rf)
res_0 <- lm(dr ~ rf[-length(rf)])
tet0 <- c(res_0$coef, var(residuals(res_0)), 0)
names(tet0) <- c("alpha", "beta", "sigma^2", "gamma")
res_rf <- gmm(g6, rf, tet0, control = list(maxit = 1000, reltol = 1e-10))
round(coef(res_rf), 4)

summary.gmm(res_rf)  #prints out whole summary, including p-values


#b) perform J-test to choose between Brenan-Schwartz model (null hypothesis) and the unrestricted model (alternative hypothesis).

#In the restricted model (Brenan-Schwartz), the parameter estimates and their corresponding p-values (in parentheses) are (round all to four decimals):

#For Brenan-Schwartz the restriction is gamma=1

tet0[4]<- 1 
Brenan_Schwartz <- gmm(g=g6, x=rf, t0=tet0, control = list(maxit = 1000, reltol = 1e-10), eqConst = c(4)) 
round(coef(Brenan_Schwartz),4)
summary(Brenan_Schwartz) #p-values and J-test result

