#This space is reserved for the teacher:
#Ex1: NA
#Ex2 (2pts): 
#Ex3 (2pts): 
#Feedback:
#
#
#
#################################################
#Rscript for Homework 1

#Group nr: 5
#Members:
# Oskar Lindman
# Jussi Laitinen
# Patrik Sunila
# Alina-Emelie Andersson
#Member whose quiz variant is used for coding:
# Alina-Emelie Andersson

#################################################


#Code for Question 2 


##################################################
myGWP<-function(T,deltat,a,b,R) {
  t<-seq(from=0,to=T,by=deltat) 
  result<-NULL
  for(r in 1:R) {
  x<-cumsum(c(0,a*deltat+b*sqrt(deltat)
            *rnorm(n=length(t)-1)))
  temp<-data.frame(time=t,value=x,rep=paste(r),
                 drift=paste(a),diffusion=paste(b))
  result<-rbind(result,temp)
  }
  return(result)
}
##################################################

##################################################
RNGkind(sample.kind = "Rejection")
set.seed(2141)

output <-myGWP(T=2.3,deltat=0.01,a=-0.7,b=0.1, R=6)
gg<-ggplot(data=output,aes(x=time,y=value,col=rep))
gg<-gg+geom_line()
gg+ggtitle("Drift=-0.7, Diffusion=0.1")
        
output2 <- myGWP(T=2.3,deltat=0.01,a=-0.7,b=0,R=6)
gg<-ggplot(data=output2,aes(x=time,y=value,col=rep))
gg<-gg+geom_line()
gg+ggtitle("Drift=-0.7, Diffusion=0")

output3 <- myGWP(T=2.3, deltat=0.01, a=0, b=1, R=6)
gg<-ggplot(data=output3,aes(x=time,y=value,col=rep))
gg<-gg+geom_line()
gg+ggtitle("Drift=0, Diffusion=1")

#################################################


#Code for Question 3 Part II


#################################################
#Jussi's function & example

alphabeta <- function(x,y) {
  #First we fit a linear regression model 
  myfit <-lm(y~x, na.action='na.omit')
  #We assign a variable for the coefficients of 
  #The linear regression model 
  s<-summary(myfit)
  #Assign labels to a vector  
  measure <- c('aplha', 'beta')
  #Assign alpha and beta to a vector
  value <- c(s$coefficients[1,1], s$coefficients[2,1])
  #Combine vectors so they can be returned as one 
  values <- data.frame(measure, value)
  return(values)
}

#Example from quiz0 dataframe
findata<-read.table(header=TRUE,text='
                    date adjclose ticker tday
                    01-12-2020 68.76 KNEBV 1
                    02-12-2020 68.52 KNEBV 2
                    03-12-2020 68.38 KNEBV 3
                    04-12-2020 66.84 KNEBV 4
                    07-12-2020 67.5 KNEBV 5
                    01-12-2020 4589.66 OMXH 1
                    02-12-2020 4571.97 OMXH 2
                    03-12-2020 4557.42 OMXH 3
                    04-12-2020 4547.17 OMXH 4
                    07-12-2020 4571.12 OMXH 5
                    ')
library('data.table')
dt<-data.table(findata)
dt[,.(xbarP=mean(adjclose,na.rm=TRUE),sP=sd(adjclose,na.rm=TRUE),
      miP=min(adjclose,na.rm=TRUE)),by=.(ticker)]
dt[,`:=`(ret=c(NA,diff(log(adjclose)))),by=.(ticker)]
dt
dt[,.(xbarP=mean(adjclose,na.rm=TRUE),sP=sd(adjclose,na.rm=TRUE),
      miP=min(adjclose,na.rm=TRUE),
      xbarR=mean(ret,na.rm=TRUE),sR=sd(ret,na.rm=TRUE),
      miR=min(ret,na.rm=TRUE)),by=.(ticker)]
dtreshaped<-dcast(data=dt,tday~ticker,value.var='ret')
dtreshaped

#Use function to calculate alpha and beta
#Between Kone and the OMX-index

alphabeta(x=dtreshaped$OMXH,y=dtreshaped$KNEBV)
#################################################

#################################################
#Patrik's function & example
#############################
#Calculating the geometrical mean
#n represents the number of observations
#dividing the function by the number of observations
#Example with a share price during a trading week
#here c represents a vector with share prices
#############################

geo.mean <-function(x) {
  prod.x <-prod(x)
  n <- length(x)
  gm <-prod.x^ (1/n)
  return(gm)
}
geo.mean(c(2.5,2.36,2.63,2.69,2.74))

#Alina's function & example
#################################################
#Return the theoretical mean and variance of the
#Generalized Wiener Process, with drift a and
#diffusion b and the time horizon T.
#In the function the mean and variance are
#estimated according to the theory for GWP.
#Thereafter, the results are added to a data.frame
#and lastly, returns the data.frame.
#The example is from Quiz1, Q1, {X_t}, t=0.1
#################################################

myTheoreticalMeanVar<-function(a, b, T) {
  mean<- a*T
  var<- (b^2)*T  
  result<-data.frame(mean=mean, variance=var)
  return(result)
}

myTheoreticalMeanVar(a=1.3, b=1.5, T=0.1)

#################################################


#Oskars example
##################################################
#Give the arguments for the function(no values yet)
#Generates r paths from 0 to T (T=1 in our case) 
#for the discrete-time model
#Write the formula and store it in valueS
#Use data.frame to create a temporary data frame
#Add the temporary data frame to the rvariable 
#"result" that has NULL value
#Assign values to the arguments and plot.
##################################################

DiscreteTimeProcess <- function(T,mu,sigma,S,deltat,R){
  t<-seq(from=0,to=T,by=deltat) 
  result <- NULL
  for(r in 1:R){
    valueS <- cumsum(c(S,mu*S*deltat+sigma*S*rnorm(length(t)-1,0,1)))
    temp <- data.frame(time=t,valueS,rep=paste(r))
    result <- rbind(result,temp)}
  return(result)
}
library(ggplot2)
output<-DiscreteTimeProcess(1,0.01,0.05,10,1/252,1)
gg<-ggplot(data=output,aes(x=time,y=valueS,col=rep))+geom_line()
gg<-gg+theme(legend.position='none')
print(gg)
##################################################
