RNGkind(sample.kind = 'Rejection')

#This space is reserved for the teacher:
#Ex1: NA
#Ex2 (2pts): 
#Ex3 (2pts): 
#Feedback:
#
#
#
#################################################
#Rscript for HW3

#Group nr: 5
#Members:
#Alina-Emelie Andersson
#Jussi Laitinen
#Oskar Lindman
#...
#Member whose quiz variant is used for coding:
#Jussi Laitinen

#Annotations guidelines:
#Ex2: use two comment boxes; do NOT use in-line comments (see below for details)
#Ex3: use one comment box; keep the in-line comments, 
#the original ones plus those that you modified (see below for details)

#################################################Code for Exercise 2
#################################################Code for Exercise 2
#################################################Code for Exercise 2

#################################################
#function to generate R paths of the GBM {S_t}
#with parameters mu and sigma on [0,T]; arguments:
#S0: [num] value of the process at time t=0
#mu: [num] drift parameter of the GBM
#sigma: [num] diffusion parameter of the GBM
#T: [num] right-end point of the interval [0,T]
#deltat: [num] time-step to discretize [0,T]
#R: [int] the number of paths/reps
#output: data.frame with 
#(rep,drift,diffusion)-tagged paths
#################################################
myGeometricBrownianMotion<-function(S0,mu,sigma,T,deltat,R)
{
  t<-seq(from=0,to=T,by=deltat)
  result<-NULL 
  for(r in 1:R)
  { 
    z<-cumsum(c(0,sqrt(deltat)*rnorm(n=length(t)-1)))
    s<-exp(log(S0)+(mu-sigma^2/2)*t+sigma*z)
    temp<-data.frame(time=t,value=s,rep=paste(r),
                     mu=paste(mu),sigma=paste(sigma)) 
    result<-rbind(result,temp) 
  } 
  return(result)
}
#################################################
#function to generate R realizations of the 
#random variable S_T, where {S_t} is the GBM 
#with parameters mu and sigma on [0,T]; arguments:
#S0: [num] value of the process at time t=0
#mu: [num] drift parameter of the GBM
#sigma: [num] diffusion parameter of the GBM
#T: [num] right-end point of the interval [0,T]
#R: [int] the number of realizations/reps
#output: [num] vector with R realizations of S_T
#################################################
myST<-function(S0,mu,sigma,T,R)
{
  constant1<-S0*exp((mu-sigma^2/2)*T) 
  constant2<-sigma*sqrt(T) 
  
  ST<-constant1*exp(constant2*rnorm(n=R))
  
  return(ST)
}  

#comment box related to the declaration of input variables
#################################################
#Stockprice, optionprice and strikeprice taken
#from option quote data-file. TTE (Time to exipiry)                                                                                                
#calculated april-february/12 and rounded to 2 digits.                                                                                               
#Riskfree intrest rate is assigned as today's value for                                                                                                
#3 month-maturity T-Bill rate in:                                                                                              
#DailyTreasuryYieldCurveRates.txt                                                                                                
#R1 & R2 are  amount of replicates in Monte Carlo                                                                                            
#Stockhistory for the underlying stock to European MSFT                                                                                              
#loaded and taken from STtockPrices. Estimated volatility 
# calculated from assigned 1 year subset of Stockhistory
#################################################
#corresponding Rcode next
library('derivmkts')
library('ggplot')
stockprice <- 239.48
optionprice <- 17.86
strikeprice <- 230.00
TTE <- round((4-2)/12, digits = 2)
riskfreerate <- 0.03                  #as percentage, adjust to 0.0003? annualized? 
deltat <- 0.01
R1 <- 10000
R2 <- 10 
prices <-read.table(file='C:/Users/jussi/Desktop/Introduction to Mathematical finance/StockPrices.txt', header=TRUE)
stockhistory <- prices[c(2,4)]
oneyearyyyymmdd <- stockhistory[which(stockhistory$yyyymmdd >= max(stockhistory$yyyymmdd)-10000 ),]      #blir lite fel då today är 3.2.2021, så intervallet borde vara 3.2.2020-3.2.2021
volatility <- round(sd(oneyearyyyymmdd$MSFT)/100, digits =4)          #volatility med log-returns
#comment box related to the remaining tasks
#################################################
#First calculate the value of the option using Black-Scholes                                                                                             
#Calculating delta and gamma using greeks-function in derivmkts                                                                                               
#Rounding delta and gamma to 4 digits                                                                                              
#Calculate the implied volatility using Black-Scholes                                                                                               
#Set seed to control the randomness                                                                                               
#Simulating S_t for 10000 replicates using myST-function                                                                                               
#Calculating payoffs for each replicated stockprice S_t                                                                                               
#Calculating the Monte Carlo value of the call option                                                                                              
#Simulating 10 paths of S_t using myGeometricBrownianMotion-function                                                                                               
#Plotting simulated paths using ggplot                                                                                              
#################################################
#corresponding Rcode next
bsprice <- bscall(stockprice, strikeprice, volatility , riskfreerate, TTE, 0)
greeks1 <- greeks(bscall(stockprice, strikeprice, volatility , riskfreerate, TTE, 0))
delta <- round(greeks1[2], digits = 4)
gamma <- round(greeks1[3], digits = 4)
impvol <- bscallimpvol(stockprice, strikeprice, riskfreerate, TTE, 0, optionprice)
set.seed(11705)
simulation1 <- myST(stockprice, riskfreerate, volatility, TTE, R1)
payoff <- ifelse(test=simulation1-strikeprice >0, yes=simulation1-strikeprice, no=0)
callMC <- exp(-riskfreerate*(TTE-0))*mean(payoff)
simulation2 <- myGeometricBrownianMotion(stockprice, riskfreerate, volatility, TTE, deltat, R2)
gg <- ggplot(data=simulation2,aes(x=time,y=value,col=rep)) 
gg <- gg+geom_line()
print(gg)
#################################################Code for Exercise 3
#################################################Code for Exercise 3
#################################################Code for Exercise 3

#comment box to say which parts of BullSpreadCallDeltaGamma.R
#you had to modify to implement put-based strategy
#################################################
#                                                                                               
#                                                                                               
#                                                                                               
#                                                                                               
#                                                                                               
#                                                                                               
#                                                                                               
#                                                                                               
#                                                                                               
#                                                                                               
#################################################
#corresponding Rcode (with in-line comments) next









