RNGkind(sample.kind = 'Rejection')
rm(list=ls()) 
#This space is reserved for the teacher:
#Ex1: NA
#Ex2 (2pts): 
#Ex3 (2pts): 
#Feedback:
#
#
#
#################################################
#Rscript for HW3

#Group nr: 5
#Members:
#Jussi Laitinen
#Oskar Lindman
#Alina-Emelie Andersson
#Member whose quiz variant is used for coding:
#Jussi Laitinen

#Annotations guidelines:
#Ex2: use two comment boxes; do NOT use in-line comments (see below for details)
#Ex3: use one comment box; keep the in-line comments, 
#the original ones plus those that you modified (see below for details)

#################################################Code for Exercise 2
#################################################Code for Exercise 2
#################################################Code for Exercise 2

#################################################
#function to generate R paths of the GBM {S_t}
#with parameters mu and sigma on [0,T]; arguments:
#S0: [num] value of the process at time t=0
#mu: [num] drift parameter of the GBM
#sigma: [num] diffusion parameter of the GBM
#T: [num] right-end point of the interval [0,T]
#deltat: [num] time-step to discretize [0,T]
#R: [int] the number of paths/reps
#output: data.frame with 
#(rep,drift,diffusion)-tagged paths
#################################################
myGeometricBrownianMotion<-function(S0,mu,sigma,T,deltat,R)
{
  t<-seq(from=0,to=T,by=deltat)
  result<-NULL 
  for(r in 1:R)
  { 
    z<-cumsum(c(0,sqrt(deltat)*rnorm(n=length(t)-1)))
    s<-exp(log(S0)+(mu-sigma^2/2)*t+sigma*z)
    temp<-data.frame(time=t,value=s,rep=paste(r),
                     mu=paste(mu),sigma=paste(sigma)) 
    result<-rbind(result,temp) 
  } 
  return(result)
}
#################################################
#function to generate R realizations of the 
#random variable S_T, where {S_t} is the GBM 
#with parameters mu and sigma on [0,T]; arguments:
#S0: [num] value of the process at time t=0
#mu: [num] drift parameter of the GBM
#sigma: [num] diffusion parameter of the GBM
#T: [num] right-end point of the interval [0,T]
#R: [int] the number of realizations/reps
#output: [num] vector with R realizations of S_T
#################################################
myST<-function(S0,mu,sigma,T,R)
{
  constant1<-S0*exp((mu-sigma^2/2)*T) 
  constant2<-sigma*sqrt(T) 
  
  ST<-constant1*exp(constant2*rnorm(n=R))
  
  return(ST)
}  

#comment box related to the declaration of input variables
#################################################
# TCKR: the ticker for the stock, here Microsoft (MSFT) 
# Stock price (S0), option price (c) & strike price (K): 
# [num] manually taken from option-quote data file
# TTE: [num] Time to exipiry calculated april-february                                                                                               
# rf: [num] 3 month-maturity T-Bill converted to decimals                                                                                                
# R1 & R2: [int] Amount of replicates in Monte Carlo                                                                                            
# today & oneyearago: [int] Dates for one year interval  
# prices: data.frame including historic stock data
# stockhistory: data.frame is a subset of mystockdata 
# including the one year historic data for MSFT stock                                                                                              
#################################################
#corresponding Rcode next
library('derivmkts')
library('ggplot2')
TCKR<- "MSFT"
S0<- 239.48
c<- 17.86
K<- 230.00
TTE<- round((4-2)/12, digits=2)
rf<- 0.04*0.01                  
deltat<- 0.001
R1<- 10000; R2<- 10 
today<- 20210203
oneyearago<- today-10000

prices<-read.table(file='C:/Users/jussi/Desktop/Introduction to Mathematical finance/StockPrices.txt', header=TRUE)
stockhistory<- prices[prices$yyyymmdd >= oneyearago & prices$yyyymmdd <= today, TCKR]

#comment box related to the remaining tasks
#################################################
# Estimate volatility (vol) using  log-returns.
# First, estimating the value of the call-option
# (bsprice) using the bscall-function. Next calculate,
# delta & gamma: Estimated using greeks-function, and                                                                                                                                                                                    
# impvol: Estimated using bsimpvol-function.                                                                                             
# Set seed to control the randomness. Run two simulations;
# sim1: 10000 replicates for S_t using myST()                                                                                            
# Calculating payoffs (payoff) for each replicated stockprice S_t,                                                                                             
# callMC: Monte Carlo value of the call option using payoff from sim1  .                                                                                           
# sim2: 10 paths of S_t using myGeometricBrownianMotion()                                                                                            
# Plotting simulated paths (sim2) using ggplot.
# After subsetting path 6 from sim2, the length of the vector &
# the last three values of the sixth path of S_t are returned.
#################################################
#corresponding Rcode next

vol<- round(sd(logreturns)/sqrt(1/252),4)

bsprice<- bscall(S0, K, vol , rf, TTE, 0)

greeks1<- greeks(bscall(S0, K, vol , rf, TTE, 0))
delta<- round(greeks1[2], digits = 4)
gamma<- round(greeks1[3], digits = 4)
impvol<- bscallimpvol(S0, K, rf, TTE, 0, c)
round(impvol, 4)

set.seed(11705)

sim1<- myST(S0, rf, vol, TTE, R1)
payoff<- ifelse(test=sim1-K >0, yes=sim1-K, no=0)
callMC<- exp(-rf*(TTE-0))*mean(payoff)
round(callMC, 4)

set.seed(11705)

sim2<- myGeometricBrownianMotion(S0,rf,vol,TTE,deltat,R2)
gg<- ggplot(data=sim2,aes(x=time,y=value,col=rep)) 
gg<- gg+geom_line()
print(gg)

rep6<-sim2[sim2$rep == 6, 2]
length(rep6)
tail(rep6, n=3)

#################################################Code for Exercise 3
#################################################Code for Exercise 3
#################################################Code for Exercise 3


#comment box to say which parts of BullSpreadCallDeltaGamma.R
#you had to modify to implement put-based strategy
#################################################
# 1. Modified ticker and date according to assignment
# 2. Modified the calculation of option values from                                                                                              
# 3. calls to puts in accordance to assignment.
# 4. Modified payoffs from call payouts to put payouts                                                                                               
# 5. Modified initial cashflows to get correct profits                                                                                                
# 6. Modified Greeks input to be greeks from puts           
# 7. Change variable names 'c1' & 'c2' to 'p1' & 'p2'                                                                                              
#                                                                                               
#                                                                                               
#                                                                                               
#                                                                                               
#################################################
#corresponding Rcode (with in-line comments) next
rm(list=ls()) # clear the workspace

# load the necessary Rpackages 
library('quantmod') #data download
library('derivmkts') #option-related functions 
library('data.table') #data manipulation
library('ggplot2') #plotting

# obtain daily stock price data for the implementation of the strategy 
# (observed path of the process {S_t} in the real world)
myticker<-'EBAY' #Change ticker
mystart<-'2018-02-01' #Change date 
myend<-'2019-11-22' #Change date

mydata<-getSymbols.yahoo(Symbols=myticker,from=mystart,to=myend,auto.assign=FALSE)
head(mydata)
tail(mydata)

# adjust 'start' date to the first available date = 'today' (in 'Date' format) 
# adjust 'end' date to the last available date = expiry date (in 'Date' format)
mystart<-time(mydata)[1]  
myend<-time(mydata)[length(time(mydata))]

mydata<-as.data.frame(mydata)
# to mydata, append a new variable/column 'time' with time-step deltat=1/252 and round it
mydata$time<-round(x=seq(from=0,to=(nrow(mydata)-1)/252,by=1/252),digits=4) 
head(mydata)
tail(mydata)

# obtain 'historical' (wrt 'today') daily stock price data to estimate sigma parameter
# (for simplicity, use one year of daily observations) 
myhiststart<-mystart-365 #this works becasue 'mystart' is in 'Date' format
myhistend<-mystart
myhistdata<-getSymbols.yahoo(myticker,from=myhiststart,to=myhistend,
                             auto.assign=FALSE)
myhistdata<-as.data.frame(myhistdata)

# find estimate of sigma, round it 
SIGMA<-round(x=sd(diff(log(myhistdata[,6])))*sqrt(252),digits=4) 
T<-tail(x=mydata$time,n=1) #extract expiry time T = the last element of 'time'

# obtain the risk-free rate for 'today';
# for simplicity, we use 3-month maturity; 
# rates are in percentages and are annualized
mysymbol<-'DGS3MO'      
myratedata<-getSymbols(Symbols=mysymbol,src='FRED',auto.assign = FALSE)
RFREE<-myratedata[time(myratedata)==mystart][[1]]*0.01 
RFREE

# extract/declare/calculate relevant variables 
# for the implementation of the strategy:
# K1 = the strike price of the short put
# K2 = the strike price of the long put, where K1<K2; 
time<- mydata$time #time (num vector)
S<- mydata[,6] #stock price  (num vector)
TTE<-T-mydata$time #time-to-expiry (num vector)
K1<- 33.4; K2<- 37

# calculate option prices in Rpackage derivmkts:
# p1 = the price of the put with strike K1 (rounded to 4 decimals)
# p2 = the price of the put with strike K2 (rounded to 4 decimals)
p1<-bsput(s=S, k=K1, v=SIGMA, r=RFREE, tt= TTE, d=0) #Change bscall to bsput. This is the value of the short put
p1<-round(p1,4)
p2<-bsput(s=S, k=K2, v=SIGMA, r=RFREE, tt = TTE, d = 0) #Change bscall to bsput. This is the value of the long put
p2<-round(p2,4)

# calculate the payoffs (round all to 4 decimals): 
# payoff1 = the payoff from the long put with strike K1
# payoff2 = the payoff from the short put with strike K2
# payoff = the total payoff payoff1<- -ifelse(test=S-K2z0,S-K1 yes= ,no=0);payoff1<-round(x=payoff1,digits=4)
payoff1<- ifelse(test=S-K1<0,yes= K1-S,no=0);payoff1<-round(x=payoff1,digits=4)    #Change payoff to put payoffs
payoff2<- ifelse(test=S-K2<0,yes=-(K2-S),no=0);payoff2<-round(x=payoff2,digits=4)  #Change payoff to put payoffs
payoff<- payoff1+payoff2;payoff<-round(x=payoff,digits=4)

# calculate the profit (profit=the total payoff minus the initial investment); 
# negative profit = loss
profit<-payoff-(-p1[1]+p2[1]);profit<-round(x=profit,digits=4) #change cashflow to puts
# p1[1]=price of the put with strike K1 at time 0
# p2[1]=price of the put with strike K2 at time 0
profit
# calculate additional quantities (delta, gamma) in Rpackage derivmkts:
# delta1 = delta of the put with strike K1 (rounded to 4 decimals)
# gamma1 = gamma of the put with strike K1 (rounded to 4 decimals)
# delta2 = delta of the put with strike K2 (rounded to 4 decimals)
# gamma2 = gamma of the put with strike K2 (rounded to 4 decimals)
greeks1<-greeks2(bsput,list(s = S, k = K1, v = SIGMA, r = RFREE, tt = TTE, d = 0)) #Change to puts 
delta1<-greeks1['Delta',];delta1<-round(x=delta1,digits=4)
gamma1<-greeks1['Gamma',];gamma1<-round(x=gamma1,digits=4)
greeks2<-greeks2(bsput, list(s = S, k = K2, v = SIGMA, r = RFREE, tt = TTE, d = 0)) #Change to puts
delta2<-greeks2['Delta',];delta2<-round(x=delta2,digits=4)
gamma2<-greeks2['Gamma',];gamma2<-round(x=gamma2,digits=4)

# create a data.table with the relevant variables for plotting
mydt<-data.table(time,S,TTE,p1,p2,payoff1,payoff2,payoff,profit,delta1,delta2,gamma1,gamma2)

# re-shape/melt the data.table for the purpose of plotting in ggplot2
mydtmolten<-melt.data.table(data=mydt,id.vars='time')
mydtmolten 
help('melt.data.table')

# obtain the multi-panel figure in ggplot2 
gg<-ggplot(data=mydtmolten,aes(x=time,y=value))+geom_line()
gg<-gg+facet_wrap(.~variable,nrow=2,scales="free_y") #2 rows of subplots, free range for y-axis 
print(gg)
